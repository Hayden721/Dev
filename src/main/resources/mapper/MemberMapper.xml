<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dev.shop.member.dao.MemberDao">

    <insert id="insertMemberRegister">
        INSERT INTO member_tb (
            member_id, member_pw, member_name, member_email, member_phone, member_creationDate, member_auth
        )
        VALUES(
            #{memberId}, #{memberPw}, #{memberName}, #{memberEmail}, #{memberPhone}, #{memberCreationDate}, #{memberAuth}
        )
    </insert>

    <update id="updateMemberInformation">
        <choose>
            <when test="memberPw != ''">
                UPDATE member_tb
                    SET member_pw = #{memberPw}, member_phone = #{memberPhone}, member_updatedate = #{updateDate}, member_email = #{memberEmail}
                WHERE member_no = #{memberNo}
            </when>
            <otherwise>
                UPDATE member_tb
                SET member_phone = #{memberPhone}, member_updatedate = #{updateDate}, member_email = #{memberEmail}
                WHERE member_no = #{memberNo}
            </otherwise>
        </choose>

    </update>
    <update id="updateReservation">
        UPDATE reservation_tb
        SET reservation_status = '2'
        WHERE reservation_no = #{reservationNo}
    </update>

    <update id="updateMemberPassword" >
        UPDATE member_tb
        SET member_pw = #{encodePassword}
        WHERE member_no = #{memberNo}

    </update>


    <select id="selectMainInfoNewSpot" resultType="com.dev.shop.reserve.dto.RoomDto">

    </select>

    <select id="selectMemberByMemberNo" resultType="MemberResponse">
        SELECT *
        FROM member_tb
        WHERE member_id = #{memberId}
    </select>

    <select id="selectMemberToken" resultType="MemberDetailsDto">
        SELECT member_no, member_id, member_pw, member_email, member_email, member_phone, member_auth
        FROM member_tb
        WHERE member_id = #{memberId}
    </select>

    <select id="selectMemberInfo" resultType="com.dev.shop.member.dto.MemberResponse">
        SELECT member_no, member_id, member_email, member_phone, member_name, member_creationdate
        FROM member_tb
        WHERE member_id = #{memberId}
    </select>

    <select id="selectMemberPw" resultType="String">
        SELECT member_pw
        FROM member_tb
        WHERE member_no = #{memberNo};
    </select>

    <select id="selectMemberNo" resultType="java.lang.Long">
        SELECT member_no
        FROM member_tb
        where member_id = #{authId}
    </select>

    <select id="selectReservationInfo" resultType="com.dev.shop.member.dto.ReservationResponse">
        SELECT ROW_NUMBER() OVER (ORDER BY a.reservation_creationdate) AS row_num, a.reservation_no, a.reservation_date, a.reservation_creationdate, a.start_time, a.end_time,  a.reservation_status, a.room_no, a.roption_no, b.room_title, c.roption_title
        FROM reservation_tb a
        LEFT JOIN room_tb b
            ON a.room_no = b.room_no
        LEFT JOIN roomoption_tb c
            ON a.roption_no = c.roption_no
        WHERE member_no = #{memberNo}
            AND reservation_status = '1'
            ORDER BY reservation_creationdate desc
        LIMIT #{params.pagination.limitStart}, #{params.recordSize}
    </select>


    <select id="countReservationInfo" resultType="java.lang.Integer">
        SELECT count(*)
        FROM reservation_tb
        WHERE member_no = #{memberNo};
    </select>

    <select id="countReservationEndInfo" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM reservation_tb a
        LEFT JOIN (
            SELECT room_no, room_title
            FROM room_tb
        ) b
        ON a.room_no = b.room_no
        LEFT JOIN (
            SELECT roption_no, roption_title
            FROM roomoption_tb
        ) c
        ON a.roption_no = c.roption_no
        WHERE a.member_no = #{memberNo}
            AND a.reservation_status != '1'
        <!-- 검색어가 존재할 때 -->
        <if test="params.keyword != null and params.keyword != ''">
            AND b.room_title LIKE CONCAT ('%', #{params.keyword}, '%')
        </if>
        <!-- 검색 타입이 있을 때 -->
        <if test="params.searchType != null and params.searchType.size() != ''">
            AND a.reservation_status IN
                <!-- 검색 타입: 예약 취소 -->
               <foreach collection="params.searchType" item="status" open="(" separator="," close=")">
                   #{status}
               </foreach>
        </if>
    </select>

    <select id="selectNewSpot">
        select *
        from room_tb
        order by room_no desc
        limit 0, 5
    </select>

    <select id="selectRoomAndImage" resultType="com.dev.shop.member.dto.RoomAndImageResponse">
        select a.room_no, a.room_title, a.room_div, a.room_content, a.postcode, a.address, a.detail_address, a.extra_address, a.room_delete, a.seller_no,
            IFNULL(b.cnt, 0) as cnt, IFNULL(c.upload_date, '0101-01-01'), IFNULL(c.save_name, 'noImage'), IFNULL(c.original_name, 'noImage')
        FROM room_tb a
            LEFT JOIN (
                SELECT room_no, COUNT(roption_no) cnt
                FROM roomoption_tb
                GROUP BY room_no
            ) b
        ON a.room_no = b.room_no
            LEFT JOIN (
                select room_no, thumbnail, file_delete, upload_date, save_name, original_name
                from roomimage_tb
                where thumbnail = 'Y'
                and file_delete = 'N'
            ) c
        ON a.room_no = c.room_no
            WHERE a.room_delete = 'N'
            AND b.cnt != 0
            order by room_no desc
        LIMIT 0, 6
    </select>


    <select id="countPaymentHistory" resultType="java.lang.Integer">
        SELECT COUNT(*) as paging_total_count
        FROM (
            SELECT c.room_title, b.roption_title, a.reservation_date, a.start_time, a.end_time
            FROM reservation_tb a
            LEFT JOIN roomoption_tb b
                ON a.roption_no = b.roption_no
            LEFT JOIN room_tb c
                ON a.room_no = c.room_no
            WHERE a.member_no = #{memberNo}

            <!-- 검색어가 존재할 때 -->
            <if test="params.keyword != null and params.keyword.length() > 0">
                <choose>
                    <!-- 검색타입이 있을 떄 -->
                    <when test="params.searchType != null and params.searchType != ''">
                        <choose>
                            <when test="'room_title'.equals(params.searchType)">
                                AND c.room_title LIKE CONCAT('%', #{params.keyword}, '%')
                            </when>

                            <when test="'roption_title'.equals(params.searchType)">
                                AND b.roption_title LIKE CONCAT('%', #{params.keyword}, '%')
                            </when>

                        </choose>
                    </when>

                    <otherwise>
                        AND (
                            c.room_title LIKE CONCAT('%', #{params.keyword}, '%')
                            OR  b.roption_title LIKE CONCAT('%', #{params.keyword}, '%')
                        )
                    </otherwise>
                </choose>
            </if>

        ) as paging_count
    </select>

    <select id="selectMemberPaymentHistoryByMemberNo" resultType="com.dev.shop.member.dto.PaymentHistoryDto">
        SELECT ROW_NUMBER() OVER(ORDER BY a.reservation_creationdate) as row_num, c.room_title, b.roption_title, a.reservation_date, a.start_time, a.end_time, (a.end_time - a.start_time) * b.roption_price as total_price
            FROM reservation_tb a
        LEFT JOIN roomoption_tb b
            ON a.roption_no = b.roption_no
        LEFT JOIN room_tb c
            ON a.room_no = c.room_no
        WHERE a.member_no = #{memberNo}

        <!-- 검색어가 존재할 때 -->
        <if test="params.keyword != null and params.keyword.length() > 0">
            <!-- #{검색타입} = #{검색어}           -->
            <choose>
                <!-- 검색타입이 있을 떄 -->
                <when test="params.searchType != null and params.searchType != ''">
                    <choose>

                        <when test="'room_title'.equals(params.searchType)">
                            AND c.room_title LIKE CONCAT('%', #{params.keyword}, '%')
                        </when>

                        <when test="'roption_title'.equals(params.searchType)">
                            AND b.roption_title LIKE CONCAT('%', #{params.keyword}, '%')
                        </when>

                    </choose>
                </when>

                <otherwise>
                    AND (
                        c.room_title LIKE CONCAT('%', #{params.keyword}, '%')
                        OR  b.roption_title LIKE CONCAT('%', #{params.keyword}, '%')
                    )
                </otherwise>
            </choose>
        </if>


        LIMIT #{params.pagination.limitStart}, #{params.recordSize}
    </select>
    <select id="selectBookmarkList" resultType="com.dev.shop.member.dto.BookmarkResponse">
        SELECT a.room_no, b.room_title, b.room_div, b.room_content, b.postcode, b.address, b.detail_address,
            b.extra_address, b.seller_no, c.original_name, c.save_name, c.upload_date
        FROM bookmark_tb a
        LEFT JOIN room_tb b
            ON a.room_no = b.room_no
        LEFT JOIN roomimage_tb c
            ON b.room_no = c.room_no
        WHERE a.member_no = #{memberNo}
            AND c.thumbnail = 'Y'
            AND c.file_delete = 'N'
            AND b.room_delete = 'N'
    </select>

    <select id="selectIdDuplicateByMemberId" resultType="int">
        SELECT COUNT(*)
        FROM member_tb
        WHERE member_id = #{memberId}
    </select>

    <select id="selectMemberAccount" resultType="java.lang.Integer">
        SELECT count(*)
        FROM member_tb
        WHERE member_id = #{memberId} and member_name = #{memberName}
    </select>
    <select id="selectReservationEndInfo" resultType="com.dev.shop.member.dto.ReservationResponse">
        SELECT ROW_NUMBER() OVER (ORDER BY a.reservation_creationdate) AS row_num, a.reservation_no,
        a.reservation_date, a.reservation_creationdate, a.start_time, a.end_time, a.reservation_status,
        a.room_no, a.roption_no as room_option_no, b.room_title, c.roption_title
        FROM reservation_tb a
        LEFT JOIN (
            SELECT room_no, room_title
            FROM room_tb
        ) b
            ON a.room_no = b.room_no
        LEFT JOIN (
            SELECT roption_no, roption_title
            FROM roomoption_tb
        ) c
        ON a.roption_no = c.roption_no
        WHERE a.member_no = #{memberNo}
            AND a.reservation_status != '1'
            <!-- 검색 타입이 있을 때 -->
        <if test="params.searchType != null and params.searchType.size() > 0">
            AND a.reservation_status IN
            <foreach collection="params.searchType" item="status" open="(" separator="," close=")">
                #{status}
            </foreach>
        </if>

        <!-- 검색어가 존재할 때 -->
        <if test="params.keyword != null and params.keyword != ''">
            AND b.room_title LIKE CONCAT ('%', #{params.keyword}, '%')
        </if>
    </select>

</mapper>